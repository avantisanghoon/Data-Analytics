jupyter (pandats 설치 및 실행)

설치
$ pip install jupyter

실행
$ jupyter notebook

끝내기
$ ctrl + c

판다스 설정
import pandas as pd


pd.read_csv('파일명')
: 파일을 불러오는 함수

* 데이터 확인 *
.shape
: 데이터의 크기 요약
(705571, 20)
 로우데이터 수 , 항목 수
 
.info()
: 컬럼별로 데이터 확인
: 데이터 요약

* 데이터 분석에서 가장 중요한 것 중에 하나는 데이터의 type 을 먼저 확인해 보는것

.describe()
:연속형 데이터(숫자) 만 뽑아서 보여줌

.head()
: 상위 5개의 데이터만 출력하여 보여줌

.tail()
: 하위 5개의 데이터만 출력하여 보여줌

.isnull()
: missing data 를 찾아준다
: Fales -> 데이터가 정상적으로 있음
: True -> 데이터가 없음

.isnull().sum()
:missing data 를 요약하고 정렬해서 보여준다.

.columns
: 데이터의 컬럼을 보여준다. 어떤 컬럼들이 구성되어 있는지 확인

* 데이터 추출 *

df1['구매금액'].sum()
: 구매금액 컬럼의 총합. 총 구매금액

df1['구매금액'].describe()
: 구매금액 컬럼의 시리즈 형태(숫자 요약 형태 / 평균, 최소, 최대 등)

[] 대괄호를 한게 사용하면 Series 형태로 출력됨
[[]] 대활호를 두게 사용하면 테이블(표) 형태로 보여짐 Dataframe 형태

df1[['구매금액','성별']]
: 구매금액과 성별이 테이블로 정렬되어 출력됨


* 데이터 행 추출 *

df1.iloc[0]
: 행 한줄 추출 (0번째 행 추출)

df1.iloc[-1]
: 맨 아래의 행 추출

df1.iloc[0:11]
: 0번째 부터 11번째 전 까지 행 추출

df1.iloc[:100]
: 처음부터 100번째 전 까지

df1.iloc[100:]
: 100번째 부터 끝까지

* 데이터 정렬 * (sort_values 함수 사용)

df1.sort_values(by='구매금액',ascending=False)
: 특정 컬럼의 데이터를 내림차순으로 정렬하여 출력 (ascending 없으면 자동으로 오름차순으로 정렬됨)

df1.sort_values(by=['구매수량','연령'])
: 두개의 조건을 동시에 정력하고 검색하고 싶을때는 []대괄호를 사용한다.

df1.sort_values(by=['구매수량','연령'],ascending=False)
: 두개의 조건 후 내림차순으로 정력하여 출력

df1.sort_values(by=['구매수량','연령'],ascending=[False,True])
: 두개의 조건 출력 후 각 조건에 대해 정력을 달리 하고 싶을때는 ascendig에 [] 대괄호를 사용하여 값을 준다.

df1.sort_values(by=['구매수량','연령'],ascending=[False,True]).iloc[:10]
: 10번전 까지의 정렬조건에 맞는 데이터를 보여줌

* 데이터 필터 *
: 데이터의 특정 조건을 걸어서 그 값에 만족하는 데이터만 추출한다.

df1['연령대'].value_counts()
: 연령대 별로 값을 뽑아낸다.

cond1 = (df1['연령대']=='40대')
: 연령대 40인 데이터를 추출하여 cond1에 넣는다.

df1.loc[cond1]
: cond1에 loc 함수를 이용하여 40대에 해당하는 데이터만 뽑아온다.
: loc -> 특정 조건을 만족하게 하여 값을 출력하는 함수

cond1 = (df1['연령대']!='40대')
df1.loc[cond1]
: 40대를 제외한 값 출럭 (논리연산자를 사용한다. ! 는 not 이다)

cond1 = (df1['연령대']=='40대')
df1.loc[~cond1]
: cond1 앞에 ~ (물결) 을 붙이면 not 의 의미이기 때문에 cond1 의 not 인 것을 출력한다.

cond1 = (df1['연령대']=='40대')
cond2 = (df1['성별']=='남')
df1.loc[cond1 & cond2]
: 연령대가 40대 이면서 성별이 남 인 데이터 출력
: And 조건이기 때문에 & 기호를 사용한다.
: OR 조건일 경우 | 기호를 사용한다 (엔터키 위에 원 표시 위의 기호)

<연습>
30대 여성의 데이터, 구매금액이 높은 순서대로 만들어 달라.
# 30대 여성이면서 구매금액이 높은 순서대로 데이터 추출
# 파일로 저장
# 30대 여성 추출 -> 구매금액 높은순서로 정렬
# 파일로 저장
cond1 = (df1['연령대']=='30대이하')
cond2 = (df1['성별']=='여')

df1[cond1 & cond2]

cond1 = (df1['연령대']=='30대이하')
cond2 = (df1['성별']=='여')

df3 = df1[cond1 & cond2].sort_values(by='구매금액',ascending=False)
df3.shape

파일로 내보내고 저장하기
df3.to_csv('result.csv')
: 파일을 읽어올때는 read를 사용했으나 파일로 저장할때는 to 를 사용한다.

한글데이터가 깨져서 나올때 방지방법
df3.to_csv('result.csv',encoding='cp949')
: encoding='cp949' 를 넣어준다.

* 데이터 전처리 *
데이터를 가져왔을때 가장 먼저 해야할 행동들
1. 데이터 구조를 확인한다.(주로 정형데이터)


                정형데이터   Column / Row / Value
         구조관점  반정형      HTML / XML
		        비정형      SNS / Image / Video
		 
                실시간		 IoT / System log
수집데이터-  시간관점  비실시간    Statistic / Web log


                 파일    Excel / Cav
          저장형태  DB     RDBMS / NoSQL / In Memory
                 콘텐츠   Text / Image / Video
				 스트림   Transaction / HTTP
				 

df1['카테고리'].unique()
: 범주형 데이터 항목을 보여줌

df1['카테고리'].value_counts()
: 범주형 데이터 항목의 갯수

df1['카테고리'].describe()
: 범주형에 대한 통계량을 계산하여 출력함

df1[['발주가능상태','카테고리','상품명']].describe()

: 범주형 조건에 대한 통계량

* 공공 데이터 가져오는곳 *
https://www.data.go.kr/index.do

* 데이터 결측치(나오지 않거나 에러등) 보기 및 출력
shop.isnull().sum()

* 결측치 시각과 하여 보여주기 (missingno 사용)
import missingno as msno
msno.matrix(shop)
: 한글 깨침이 발생한다. 어떻게 처리할 수 있을까?

* 라이브러리가 설치되어있는지 확인하기
pip show numpy

* 시각화 라이브러리
matplotlib
seborn
https://seaborn.pydata.org/examples/anscombes_quartet.html
import seaborn as sns
sns.set_theme(style="ticks")

# Load the example dataset for Anscombe's quartet
df = sns.load_dataset("anscombe")

# Show the results of a linear regression within each dataset
sns.lmplot(x="x", y="y", col="dataset", hue="dataset", data=df,
           col_wrap=2, ci=None, palette="muted", height=4,
           scatter_kws={"s": 50, "alpha": 1})
		   
		   

